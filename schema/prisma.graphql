# source: http://localhost:4467
# timestamp: Sun Oct 07 2018 17:34:57 GMT-0700 (DST)

type AggregateChart {
  count: Int!
}

type AggregateDataPoint {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Chart implements Node {
  id: ID!
  slug: String!
  name: String
  yAxisName: String
  dataPoints(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataPoint!]
}

"""A connection to a list of items."""
type ChartConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChartEdge]!
  aggregate: AggregateChart!
}

input ChartCreateInput {
  slug: String!
  name: String
  yAxisName: String
  dataPoints: DataPointCreateManyInput
}

"""An edge in a connection."""
type ChartEdge {
  """The item at the end of the edge."""
  node: Chart!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChartOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  yAxisName_ASC
  yAxisName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChartPreviousValues {
  id: ID!
  slug: String!
  name: String
  yAxisName: String
}

type ChartSubscriptionPayload {
  mutation: MutationType!
  node: Chart
  updatedFields: [String!]
  previousValues: ChartPreviousValues
}

input ChartSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChartSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChartSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChartSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChartWhereInput
}

input ChartUpdateInput {
  slug: String
  name: String
  yAxisName: String
  dataPoints: DataPointUpdateManyInput
}

input ChartWhereInput {
  """Logical AND on all given filters."""
  AND: [ChartWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChartWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChartWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  yAxisName: String

  """All values that are not equal to given value."""
  yAxisName_not: String

  """All values that are contained in given list."""
  yAxisName_in: [String!]

  """All values that are not contained in given list."""
  yAxisName_not_in: [String!]

  """All values less than the given value."""
  yAxisName_lt: String

  """All values less than or equal the given value."""
  yAxisName_lte: String

  """All values greater than the given value."""
  yAxisName_gt: String

  """All values greater than or equal the given value."""
  yAxisName_gte: String

  """All values containing the given string."""
  yAxisName_contains: String

  """All values not containing the given string."""
  yAxisName_not_contains: String

  """All values starting with the given string."""
  yAxisName_starts_with: String

  """All values not starting with the given string."""
  yAxisName_not_starts_with: String

  """All values ending with the given string."""
  yAxisName_ends_with: String

  """All values not ending with the given string."""
  yAxisName_not_ends_with: String
  dataPoints_every: DataPointWhereInput
  dataPoints_some: DataPointWhereInput
  dataPoints_none: DataPointWhereInput
}

input ChartWhereUniqueInput {
  id: ID
  slug: String
}

type DataPoint implements Node {
  id: ID!
  dateTime: DateTime!
  value: Float!
}

"""A connection to a list of items."""
type DataPointConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DataPointEdge]!
  aggregate: AggregateDataPoint!
}

input DataPointCreateInput {
  dateTime: DateTime!
  value: Float!
}

input DataPointCreateManyInput {
  create: [DataPointCreateInput!]
  connect: [DataPointWhereUniqueInput!]
}

"""An edge in a connection."""
type DataPointEdge {
  """The item at the end of the edge."""
  node: DataPoint!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DataPointOrderByInput {
  id_ASC
  id_DESC
  dateTime_ASC
  dateTime_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DataPointPreviousValues {
  id: ID!
  dateTime: DateTime!
  value: Float!
}

type DataPointSubscriptionPayload {
  mutation: MutationType!
  node: DataPoint
  updatedFields: [String!]
  previousValues: DataPointPreviousValues
}

input DataPointSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DataPointSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DataPointSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DataPointSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DataPointWhereInput
}

input DataPointUpdateDataInput {
  dateTime: DateTime
  value: Float
}

input DataPointUpdateInput {
  dateTime: DateTime
  value: Float
}

input DataPointUpdateManyInput {
  create: [DataPointCreateInput!]
  connect: [DataPointWhereUniqueInput!]
  disconnect: [DataPointWhereUniqueInput!]
  delete: [DataPointWhereUniqueInput!]
  update: [DataPointUpdateWithWhereUniqueNestedInput!]
  upsert: [DataPointUpsertWithWhereUniqueNestedInput!]
}

input DataPointUpdateWithWhereUniqueNestedInput {
  where: DataPointWhereUniqueInput!
  data: DataPointUpdateDataInput!
}

input DataPointUpsertWithWhereUniqueNestedInput {
  where: DataPointWhereUniqueInput!
  update: DataPointUpdateDataInput!
  create: DataPointCreateInput!
}

input DataPointWhereInput {
  """Logical AND on all given filters."""
  AND: [DataPointWhereInput!]

  """Logical OR on all given filters."""
  OR: [DataPointWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DataPointWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dateTime: DateTime

  """All values that are not equal to given value."""
  dateTime_not: DateTime

  """All values that are contained in given list."""
  dateTime_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTime_not_in: [DateTime!]

  """All values less than the given value."""
  dateTime_lt: DateTime

  """All values less than or equal the given value."""
  dateTime_lte: DateTime

  """All values greater than the given value."""
  dateTime_gt: DateTime

  """All values greater than or equal the given value."""
  dateTime_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

input DataPointWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createChart(data: ChartCreateInput!): Chart!
  createDataPoint(data: DataPointCreateInput!): DataPoint!
  updateChart(data: ChartUpdateInput!, where: ChartWhereUniqueInput!): Chart
  updateDataPoint(data: DataPointUpdateInput!, where: DataPointWhereUniqueInput!): DataPoint
  deleteChart(where: ChartWhereUniqueInput!): Chart
  deleteDataPoint(where: DataPointWhereUniqueInput!): DataPoint
  upsertChart(where: ChartWhereUniqueInput!, create: ChartCreateInput!, update: ChartUpdateInput!): Chart!
  upsertDataPoint(where: DataPointWhereUniqueInput!, create: DataPointCreateInput!, update: DataPointUpdateInput!): DataPoint!
  updateManyCharts(data: ChartUpdateInput!, where: ChartWhereInput): BatchPayload!
  updateManyDataPoints(data: DataPointUpdateInput!, where: DataPointWhereInput): BatchPayload!
  deleteManyCharts(where: ChartWhereInput): BatchPayload!
  deleteManyDataPoints(where: DataPointWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  charts(where: ChartWhereInput, orderBy: ChartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chart]!
  dataPoints(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataPoint]!
  chart(where: ChartWhereUniqueInput!): Chart
  dataPoint(where: DataPointWhereUniqueInput!): DataPoint
  chartsConnection(where: ChartWhereInput, orderBy: ChartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChartConnection!
  dataPointsConnection(where: DataPointWhereInput, orderBy: DataPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataPointConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  chart(where: ChartSubscriptionWhereInput): ChartSubscriptionPayload
  dataPoint(where: DataPointSubscriptionWhereInput): DataPointSubscriptionPayload
}
